# This workflow will run a test suite.

name: Run Tests
on:
  push:
  pull_request:
    branches:
      - master

defaults:
  run:
    shell: bash

jobs:
  call-linting:
    uses: ./.github/workflows/run-linting.yml@v1
    with:
      os: "ubuntu-latest"
      python-version: 3.8
  tests:
    needs: call-linting
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [ 3.8, 3.9 ]
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full python version
        id: full-python-version
        run: |
          echo python -c "import sys; print('.'.join(str(v) for v in sys.version_info[:2]))"
          echo python -c "import sys; print(sys.executable)"

      - name: Set up Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python3 - -y

      - name: Add poetry to path (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Add poetry to path (MacOS or Ubuntu)
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Test with pytest
        run: poetry run pytest tests/test_db_temperature_distribution.py -v
